一、  工厂模式(Factory)
1、简单工厂(Simple Factory)
    小明追妹子的时候，请她喝了不少咖啡，她爱喝卡布奇诺，每次去咖啡店，只要跟服务员说“来杯卡布奇诺”就行了，
    虽然各家的口味有些不同，但是不管是星爸爸还是Costa，都能够提供卡布奇诺这种咖啡。
    这里的星爸爸和Costa就是生产咖啡的工厂。
（1）简单工厂模式结构
    简单工厂模式包含如下角色：
        Factory：工厂角色-负责实现创建所有实例的内部逻辑.
        Product：抽象产品角色-是所创建的所有对象的父类，负责描述所有实例所共有的公共接口。
        ConcreteProduct：具体产品角色-是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。

（2）优缺点
    优点：客户类和工厂类分开。消费者任何时候需要某种产品，只需向工厂请求即可。消费者无须修改就可以接纳新产品。
    缺点：是当产品修改时，工厂类也要做相应的修改。

2、工厂方法(Factory Method)
    以前经常带老婆去优衣库（简单工厂）买衣服，就那么多款式，逛的次数多了，她就烦了。
    后来我改变策略，带老婆去逛商场（抽象工厂），商场里有各式品牌的店铺，不用我管，她自己就能逛上一整天。

    区别于简单工厂，核心工厂类（商场）不再负责所有产品的创建，而是将具体创建的工作交给子类（服装店）去做，成为一个抽象工厂角色，仅负责给出具体工厂类必须实现的接口（门店），而不接触哪一个产品类应当被实例化这种细节。
（1）工厂方法模式结构
    工厂方法模式包含如下角色：
    Product：抽象产品
    ConcreteProduct：具体产品
    Factory：抽象工厂
    ConcreteFactory：具体工厂

3、厂模式总结
（1）适用场景
    输出的产品是标准品，谁来做都可以。
（2）举例
    常见的数据库连接工厂，SqlSessionFactory，产品是一个数据库连接，至于是oracle提供的，还是mysql提供的，我并不需要关心，因为都能让我通过sql来操作数据。
（3）注意事项
    项目初期，软件结构和需求都没有稳定下来时，不建议使用此模式，因为其劣势也很明显，增加了代码的复杂度，增加了调用层次，增加了内存负担。所以要注意防止模式的滥用。














