3  装饰模式(Decorator)
    大学毕业，想要送给室友一个有纪念意义的礼物，就找到一张大家的合照，在上面写上“永远的兄弟！”，然后拿去礼品店装了个相框，再包上礼盒。这里的我和礼品店都是装饰器，都没有改变照片本身，却都让照片变得更适合作为礼物送人。
1、装饰模式结构
    装饰模式包含如下角色：
        Component：抽象构件
        ConcreteComponent：具体构件
        Decorator：抽象装饰类
        ConcreteDecorator：具体装饰类
2、优缺点
    优点：比继承更加灵活（继承是耦合度很大的静态关系），可以动态的为对象增加职责，可以通过使用不同的装饰器组合为对象扩展N个新功能，而不会影响到对象本身。
    缺点：当一个对象的装饰器过多时，会产生很多的装饰类小对象和装饰组合策略，增加系统复杂度，增加代码的阅读理解成本。
3、适用场景
    适合需要（通过配置，如：diamond）来动态增减对象功能的场景。
    适合一个对象需要N种功能排列组合的场景（如果用继承，会使子类数量爆炸式增长）
4、注意事项
    一个装饰类的接口必须与被装饰类的接口保持相同，对于客户端来说无论是装饰之前的对象还是装饰之后的对象都可以一致对待。
    尽量保持具体构件类Component作为一个“轻”类，也就是说不要把太多的逻辑和状态放在具体构件类中，可以通过装饰类。




























